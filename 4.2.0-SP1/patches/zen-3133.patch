--- /opt/zenoss/Products/ZenUtils/MySqlZodbFactory.py	2012-08-01 18:24:40.000000000 -0400
+++ /opt/zenoss/Products/ZenUtils/MySqlZodbFactory.py	2012-08-23 08:29:08.362982867 -0400
@@ -95,20 +95,20 @@
                     socket = zends_socket
         if socket:
             connectionParams['unix_socket'] = socket
-        kwargs = {
+        relstoreParams = {
             'cache_module_name':'memcache',
             'keep_history': kwargs.get('zodb_keep_history', False)
         }
         adapter = relstorage.adapters.mysql.MySQLAdapter(
-             options=relstorage.options.Options(**kwargs), 
+             options=relstorage.options.Options(**relstoreParams), 
              **connectionParams)
 
         # rename the poll_interval and cache_servers options to not
         # have the zodb prefix. 
         if 'zodb_poll_interval' in kwargs:
-            kwargs['poll_interval'] = kwargs['zodb_poll_interval']
+            relstoreParams['poll_interval'] = kwargs['zodb_poll_interval']
         if 'zodb_cacheservers' in kwargs:
-            kwargs['cache_servers'] = kwargs['zodb_cacheservers']
+            relstoreParams['cache_servers'] = kwargs['zodb_cacheservers']
 
         if 'poll_interval' in kwargs:
             poll_interval = kwargs['poll_interval']
@@ -116,13 +116,13 @@
                 if poll_interval is None:
                     log.info("Using default poll-interval of 60 seconds because "
                              "cache-servers was set.")
-                    kwargs['poll_interval'] = 60
+                    relstoreParams['poll_interval'] = 60
                 else:
-                    kwargs['poll_interval'] = poll_interval
+                    relstoreParams['poll_interval'] = poll_interval
             else:
                 log.warn("poll-interval of %r is being ignored because "
                          "cache-servers was not set." % poll_interval)
-        storage = relstorage.storage.RelStorage(adapter, **kwargs)
+        storage = relstorage.storage.RelStorage(adapter, **relstoreParams)
         cache_size = kwargs.get('zodb_cachesize', 1000)
         db = ZODB.DB(storage, cache_size=cache_size)
         import Globals
